/**
 * üî• NEBULA FINANCIAL - FIREBASE CONFIGURATION
 * ============================================
 * Configuraci√≥n robusta de Firebase con variables de entorno seguras
 * 
 * CARACTER√çSTICAS:
 * ‚úÖ Configuraci√≥n desde variables de entorno (.env)
 * ‚úÖ Fallback a configuraci√≥n hardcodeada para desarrollo
 * ‚úÖ Validaci√≥n completa de credenciales
 * ‚úÖ Manejo robusto de errores
 * ‚úÖ Exportaci√≥n global para compatibilidad
 * 
 * üîí SEGURIDAD:
 * - Credenciales cargadas desde .env (no hardcodeadas)
 * - Validaci√≥n de disponibilidad de Firebase SDK
 * - Permisos configurados en Firebase Console
 * - Dominios autorizados configurados
 * 
 * FUNCIONALIDAD:
 * - Configuraci√≥n completa de Firebase Authentication y Firestore
 * - Validaci√≥n autom√°tica de credenciales
 * - Detecci√≥n de disponibilidad de Firebase SDK
 * - Fallback robusto para modo offline
 * - Exportaci√≥n global segura para compatibilidad
 */

// üîê Configuraci√≥n de Firebase usando variables de entorno
let firebaseConfig = {};

// Intentar obtener configuraci√≥n desde variables de entorno
if (window.NebulaEnv && window.NebulaEnv.loaded) {
    firebaseConfig = window.NebulaEnv.getFirebaseConfig();
    console.log('üîê Firebase config cargado desde .env');
} else {
    // Fallback a configuraci√≥n demo para desarrollo
    firebaseConfig = {
        apiKey: "demo-api-key-for-development",
        authDomain: "demo.firebaseapp.com", 
        projectId: "demo-project",
        storageBucket: "demo-project.firebasestorage.app",
        messagingSenderId: "000000000000",
        appId: "1:000000000000:web:demo"
    };
    console.log('‚ö†Ô∏è Firebase config usando configuraci√≥n demo - Modo invitado habilitado');
}

// üîê Configuraci√≥n de autenticaci√≥n
// Define qu√© m√©todos de login est√°n disponibles y c√≥mo se comportan
const authConfig = {
    providers: {
        google: {
            enabled: true,
            scopes: ['profile', 'email'] // Permisos solicitados a Google
        },
        anonymous: {
            enabled: true // Habilita modo invitado sin registro
        }
    },
    persistence: 'local', // Mantener sesi√≥n entre cierres del navegador
    redirectUrl: typeof window !== 'undefined' ? window.location.origin : 'http://localhost:8000',
    cookiePolicy: 'single_host_origin' // Pol√≠tica de cookies para seguridad
};

// Configuraci√≥n de Firestore
const firestoreConfig = {
    collections: {
        users: 'users',
        transactions: 'user_transactions',
        goals: 'user_goals',
        investments: 'user_investments',
        debts: 'user_debts',
        settings: 'user_settings'
    },
    enableOfflineSupport: true,    cacheSizeBytes: 40000000 // 40MB cache
};

/**
 * üîç Validaci√≥n de configuraci√≥n de Firebase
 * 
 * PROP√ìSITO:
 * - Verifica que las credenciales de Firebase est√©n configuradas
 * - Detecta configuraciones de placeholder (que contienen 'TU_')
 * - Proporciona feedback claro sobre el estado de la configuraci√≥n
 * 
 * RETORNA:
 * - true: Firebase configurado y listo para usar
 * - false: Configuraci√≥n incompleta, usar modo offline
 * 
 * C√ìMO PROBAR:
 * - Consola: validateConfig() debe retornar true
 * - Ver logs: "‚úÖ Configuraci√≥n de Firebase validada correctamente"
 */
function validateConfig() {
    try {
        const required = ['apiKey', 'authDomain', 'projectId'];
        const missing = required.filter(key => !firebaseConfig[key] || firebaseConfig[key].includes('TU_'));
        
        if (missing.length > 0) {
            console.warn('‚ö†Ô∏è Variables de Firebase no configuradas:', missing);
            console.log('ÔøΩ La aplicaci√≥n funcionar√° en modo offline/invitado');
            return false;
        }
        
        console.log('‚úÖ Configuraci√≥n de Firebase validada correctamente');
        return true;
    } catch (error) {
        console.error('‚ùå Error validando configuraci√≥n:', error);
        return false;
    }
}

// Funci√≥n para detectar si Firebase est√° disponible
function isFirebaseAvailable() {
    try {
        return typeof firebase !== 'undefined' && firebase.apps !== undefined;
    } catch (error) {
        console.warn('‚ö†Ô∏è Firebase no disponible:', error.message);
        return false;
    }
}

// Validar configuraci√≥n de forma segura
let isConfigValid = false;
let hasFirebase = false;

try {
    isConfigValid = validateConfig();
    hasFirebase = isFirebaseAvailable();
} catch (error) {
    console.error('‚ùå Error durante la validaci√≥n:', error);
    isConfigValid = false;
    hasFirebase = false;
}

// Configuraci√≥n completa
const nebulaConfig = {
    firebase: firebaseConfig,
    auth: authConfig,
    firestore: firestoreConfig,
    app: {
        name: "Nebula Financial",
        version: "2.0.0",
        environment: "development",
        fallbackMode: !isConfigValid || !hasFirebase,
        guestMode: {
            enabled: true,
            storageKey: 'nebula_guest_data',
            maxTransactions: 1000
        }
    },
    isValid: isConfigValid,
    hasFirebase: hasFirebase
};

// Exportar configuraci√≥n globalmente de forma segura
try {
    if (typeof window !== 'undefined') {
        window.NebulaConfig = nebulaConfig;
        window.firebaseConfig = firebaseConfig;
        
        console.log('üî• Firebase config cargado:', isConfigValid ? '‚úÖ V√°lido' : '‚ö†Ô∏è Modo fallback');
        console.log('üîß Firebase disponible:', hasFirebase ? '‚úÖ S√≠' : '‚ùå No');
        console.log('üéØ NebulaConfig exportado exitosamente');
        
        if (!isConfigValid || !hasFirebase) {
            console.log('üè† Modo invitado habilitado - La app funcionar√° offline');
        }
    }
} catch (error) {
    console.error('‚ùå Error exportando configuraci√≥n:', error);
    
    // Fallback m√≠nimo garantizado
    if (typeof window !== 'undefined') {
        window.NebulaConfig = {
            firebase: {},
            auth: { providers: { anonymous: { enabled: true } } },
            firestore: { enableOfflineSupport: true },
            app: { 
                name: "Nebula Financial",
                fallbackMode: true, 
                guestMode: { enabled: true, storageKey: 'nebula_guest_data' }
            },
            isValid: false,
            hasFirebase: false
        };
        console.log('üîÑ Configuraci√≥n fallback aplicada');
    }
}

// üí° MEJORAS SUGERIDAS (NO IMPLEMENTADAS):
// 1. Sistema de configuraci√≥n por entorno: Implementar detecci√≥n autom√°tica del entorno
//    (desarrollo/staging/producci√≥n) y cargar configuraciones espec√≠ficas desde archivos
//    separados o variables de entorno del servidor. Esto permitir√≠a tener diferentes
//    proyectos Firebase para cada entorno sin cambiar c√≥digo.
//
// 2. Validaci√≥n avanzada de permisos: Agregar verificaci√≥n en tiempo real de los
//    permisos configurados en Firebase Console (Rules de Firestore, m√©todos de auth
//    habilitados, dominios autorizados) y mostrar warnings espec√≠ficos si detecta
//    configuraciones potencialmente inseguras o incompletas.
