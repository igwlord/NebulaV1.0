// ===============================================
// üî• NEBULA FIREBASE AUTHENTICATION MODULE
// ===============================================

/**
 * üîê M√≥dulo de autenticaci√≥n Firebase para Nebula Financial
 * Incluye: Login con Google, modo an√≥nimo, gesti√≥n de sesiones
 */
const NebulaAuth = {
    
    // Estado de autenticaci√≥n
    state: {
        user: null,
        isAuthenticated: false,
        isLoading: false,
        isAnonymous: false,
        provider: null
    },

    // Configuraci√≥n
    config: {
        persistence: 'local',
        enableAnonymous: true,
        enableGoogle: true
    },

    /**
     * Inicializar el m√≥dulo de autenticaci√≥n
     */
    async init() {
        console.log('üîê Inicializando Nebula Authentication...');
        
        try {
            // Inicializar variables de protecci√≥n contra spam
            this.lastVerificationSent = 0;
            this.lastPasswordReset = {};
            
            // Verificar si Firebase est√° disponible
            if (!window.firebase) {
                throw new Error('Firebase SDK no est√° disponible');
            }

            // Verificar configuraci√≥n
            if (!window.NebulaConfig || !window.NebulaConfig.firebase) {
                throw new Error('Configuraci√≥n de Firebase no v√°lida');
            }

            // üî• INICIALIZAR FIREBASE APP SI NO EXISTE
            if (!firebase.apps.length) {
                console.log('üî• Inicializando Firebase App...');
                firebase.initializeApp(window.NebulaConfig.firebase);
                console.log('‚úÖ Firebase App inicializado correctamente');
            } else {
                console.log('‚úÖ Firebase App ya est√° inicializado');
            }

            // Configurar persistencia
            await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);

            // Escuchar cambios de autenticaci√≥n
            firebase.auth().onAuthStateChanged((user) => {
                this.handleAuthStateChange(user);
            });

            console.log('‚úÖ Nebula Authentication inicializado');
            return true;

        } catch (error) {
            console.error('‚ùå Error inicializando autenticaci√≥n:', error);
            this.handleAuthError(error);
            return false;
        }
    },

    /**
     * Manejar cambios en el estado de autenticaci√≥n
     */
    handleAuthStateChange(user) {
        console.log('üîÑ Cambio en estado de autenticaci√≥n:', user ? 'Autenticado' : 'No autenticado');
        
        if (user) {
            // Detectar el proveedor de autenticaci√≥n
            let provider = 'email';
            if (user.isAnonymous) {
                provider = 'anonymous';
            } else if (user.providerData && user.providerData.length > 0) {
                const providerId = user.providerData[0].providerId;
                if (providerId === 'google.com') {
                    provider = 'google';
                } else if (providerId === 'password') {
                    provider = 'email';
                }
            }
            
            this.state.user = {
                uid: user.uid,
                email: user.email,
                displayName: user.displayName,
                photoURL: user.photoURL,
                emailVerified: user.emailVerified,
                isAnonymous: user.isAnonymous,
                createdAt: user.metadata.creationTime,
                lastSignIn: user.metadata.lastSignInTime,
                provider: provider
            };
            
            this.state.isAuthenticated = true;
            this.state.isAnonymous = user.isAnonymous;
            this.state.provider = provider;
            
            // Actualizar configuraci√≥n del usuario en settings
            this.updateUserSettings(this.state.user);
            
            // Emitir evento con datos completos del usuario
            this.emitEvent('userSignedIn', this.state.user);
            
        } else {
            this.state.user = null;
            this.state.isAuthenticated = false;
            this.state.isAnonymous = false;
            this.state.provider = null;
            
            // Emitir evento
            this.emitEvent('userSignedOut');
        }
        
        this.state.isLoading = false;
    },

    /**
     * Login con Google
     */
    async signInWithGoogle() {
        console.log('üîê Iniciando login con Google...');
        
        try {
            this.state.isLoading = true;
            
            const provider = new firebase.auth.GoogleAuthProvider();
            provider.addScope('email');
            provider.addScope('profile');
            
            const result = await firebase.auth().signInWithPopup(provider);
            
            console.log('‚úÖ Login con Google exitoso');
            this.showNotification('¬°Bienvenido a Nebula Financial!', 'success');
            
            return result.user;
            
        } catch (error) {
            console.error('‚ùå Error en login con Google:', error);
            this.handleAuthError(error);
            throw error;
        }
    },

    /**
     * Login an√≥nimo
     */
    async signInAnonymously() {
        console.log('üîê Iniciando sesi√≥n an√≥nima...');
        
        try {
            this.state.isLoading = true;
            
            const result = await firebase.auth().signInAnonymously();
            
            console.log('‚úÖ Sesi√≥n an√≥nima creada');
            this.showNotification('Sesi√≥n temporal iniciada', 'info');
            
            return result.user;
            
        } catch (error) {
            console.error('‚ùå Error en sesi√≥n an√≥nima:', error);
            this.handleAuthError(error);
            throw error;
        }
    },

    /**
     * Login con email y password
     */
    async signInWithEmail(email, password) {
        console.log('üîê Iniciando login con email...');
        
        try {
            this.state.isLoading = true;
            
            // Validar email y password
            if (!this.validateEmail(email)) {
                throw new Error('Formato de email inv√°lido');
            }
            
            if (!password || password.length < 6) {
                throw new Error('La contrase√±a debe tener al menos 6 caracteres');
            }
            
            const result = await firebase.auth().signInWithEmailAndPassword(email, password);
            
            console.log('‚úÖ Login con email exitoso');
            this.showNotification('¬°Bienvenido de vuelta!', 'success');
            
            return result.user;
            
        } catch (error) {
            console.error('‚ùå Error en login con email:', error);
            this.handleAuthError(error);
            throw error;
        }
    },

    /**
     * Registro con email y password
     */
    async createUserWithEmail(email, password, displayName = null) {
        console.log('üîê Creando usuario con email...');
        
        try {
            this.state.isLoading = true;
            
            // Validar email y password
            if (!this.validateEmail(email)) {
                throw new Error('Formato de email inv√°lido');
            }
            
            if (!password || password.length < 6) {
                throw new Error('La contrase√±a debe tener al menos 6 caracteres');
            }
            
            const result = await firebase.auth().createUserWithEmailAndPassword(email, password);
            
            // Actualizar perfil con nombre si se proporciona
            if (displayName) {
                await result.user.updateProfile({
                    displayName: displayName
                });
            }
            
            // Enviar email de verificaci√≥n
            await this.sendEmailVerification();
            
            console.log('‚úÖ Usuario creado exitosamente');
            this.showNotification('¬°Cuenta creada! Verifica tu email.', 'success');
            
            return result.user;
            
        } catch (error) {
            console.error('‚ùå Error creando usuario:', error);
            this.handleAuthError(error);
            throw error;
        }
    },

    /**
     * Enviar email de verificaci√≥n
     * ‚úÖ Con protecci√≥n contra m√∫ltiples env√≠os
     */
    async sendEmailVerification() {
        try {
            const user = firebase.auth().currentUser;
            if (user && !user.emailVerified) {
                // Verificar si ya se envi√≥ un correo recientemente (√∫ltimos 60 segundos)
                const lastSent = this.lastVerificationSent || 0;
                const now = Date.now();
                
                if (now - lastSent < 60000) {
                    console.log('‚ö†Ô∏è Email de verificaci√≥n enviado recientemente, esperando...');
                    this.showNotification('Espera un minuto antes de solicitar otro email', 'warning');
                    return false;
                }
                
                await user.sendEmailVerification();
                this.lastVerificationSent = now;
                console.log('‚úÖ Email de verificaci√≥n enviado (√∫nico)');
                this.showNotification('Email de verificaci√≥n enviado', 'info');
                return true;
            }
            return false;
        } catch (error) {
            console.error('‚ùå Error enviando verificaci√≥n:', error);
            this.handleAuthError(error);
            throw error;
        }
    },

    /**
     * Reenviar email de verificaci√≥n
     */
    async resendEmailVerification() {
        return await this.sendEmailVerification();
    },

    /**
     * Restablecer contrase√±a
     * ‚úÖ Con protecci√≥n contra m√∫ltiples env√≠os
     */
    async resetPassword(email) {
        console.log('üîê Enviando reset de contrase√±a para:', email);
        
        try {
            // Validar email primero
            if (!email || email.trim() === '') {
                throw new Error('Debes ingresar tu email para recuperar la contrase√±a');
            }
            
            // Verificar si ya se envi√≥ un reset recientemente (√∫ltimos 60 segundos)
            const resetKey = `reset_${email}`;
            const lastSent = this.lastPasswordReset?.[resetKey] || 0;
            const now = Date.now();
            
            if (now - lastSent < 60000) {
                console.log('‚ö†Ô∏è Reset de contrase√±a enviado recientemente para este email');
                this.showNotification('Espera un minuto antes de solicitar otro reset', 'warning');
                return false;
            }
            
            if (!this.validateEmail(email)) {
                throw new Error('Formato de email inv√°lido. Debe ser algo como: ejemplo@correo.com');
            }
            
            // Mostrar notificaci√≥n de proceso
            this.showNotification('üìß Enviando email de recuperaci√≥n...', 'info');
            
            await firebase.auth().sendPasswordResetEmail(email);
            
            // Guardar timestamp del env√≠o
            if (!this.lastPasswordReset) this.lastPasswordReset = {};
            this.lastPasswordReset[resetKey] = now;
            
            console.log('‚úÖ Email de reset enviado exitosamente (√∫nico)');
            
            // Notificaci√≥n de √©xito m√°s detallada
            this.showNotification(
                `‚úÖ Email de recuperaci√≥n enviado a ${email}. Revisa tu bandeja de entrada y spam. El enlace expira en 1 hora.`, 
                'success'
            );
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error en reset de contrase√±a:', error);
            
            // Manejo espec√≠fico para reset de contrase√±a
            if (error.code === 'auth/user-not-found') {
                this.showNotification(
                    'üë§ No existe una cuenta con este email. Verifica que sea correcto o reg√≠strate.',
                    'warning'
                );
            } else if (error.code === 'auth/invalid-email') {
                this.showNotification(
                    'üìß Formato de email inv√°lido. Debe ser algo como: ejemplo@correo.com',
                    'error'
                );
            } else if (error.code === 'auth/too-many-requests') {
                this.showNotification(
                    '‚è≥ Demasiados intentos de recuperaci√≥n. Espera unos minutos antes de intentar nuevamente.',
                    'warning'
                );
            } else {
                this.handleAuthError(error);
            }
            
            throw error;
        }
    },

    /**
     * Validar formato de email
     */
    validateEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    },

    /**
     * Verificar si el email del usuario est√° verificado
     */
    isEmailVerified() {
        const user = firebase.auth().currentUser;
        return user ? user.emailVerified : false;
    },

    /**
     * Cerrar sesi√≥n
     */
    async signOut() {
        console.log('üîê Cerrando sesi√≥n...');
        
        try {
            await firebase.auth().signOut();
            
            console.log('‚úÖ Sesi√≥n cerrada');
            this.showNotification('Sesi√≥n cerrada correctamente', 'info');
            
            // Limpiar datos locales si es necesario
            this.clearLocalData();
            
        } catch (error) {
            console.error('‚ùå Error cerrando sesi√≥n:', error);
            this.handleAuthError(error);
            throw error;
        }
    },

    /**
     * Convertir usuario an√≥nimo a cuenta permanente
     */
    async linkAnonymousWithGoogle() {
        console.log('üîê Convirtiendo cuenta an√≥nima a permanente...');
        
        try {
            if (!this.state.isAnonymous) {
                throw new Error('El usuario no es an√≥nimo');
            }
            
            const provider = new firebase.auth.GoogleAuthProvider();
            const result = await firebase.auth().currentUser.linkWithPopup(provider);
            
            console.log('‚úÖ Cuenta an√≥nima convertida a permanente');
            this.showNotification('¬°Cuenta guardada permanentemente!', 'success');
            
            return result.user;
            
        } catch (error) {
            console.error('‚ùå Error convirtiendo cuenta:', error);
            this.handleAuthError(error);
            throw error;
        }
    },

    /**
     * Actualizar configuraci√≥n del usuario en el m√≥dulo de settings
     */
    updateUserSettings(user) {
        if (window.SettingsModule) {
            const settings = window.SettingsModule.getSettings();
            
            // Actualizar perfil con datos de Firebase
            settings.profile.name = user.displayName || settings.profile.name;
            settings.profile.email = user.email || settings.profile.email;
            settings.profile.avatar = user.photoURL ? 'üñºÔ∏è' : settings.profile.avatar;
            
            // Actualizar fecha de registro si es la primera vez
            if (!settings.profile.joinDate || settings.profile.joinDate === settings.profile.joinDate) {
                settings.profile.joinDate = user.createdAt || new Date().toISOString();
            }
            
            window.SettingsModule.saveSettings(settings);
            console.log('‚úÖ Configuraci√≥n de usuario actualizada');
        }
    },

    /**
     * Limpiar datos locales
     */
    clearLocalData() {
        // Solo limpiar si es una sesi√≥n an√≥nima
        if (this.state.isAnonymous) {
            console.log('üßπ Limpiando datos de sesi√≥n an√≥nima...');
            // Aqu√≠ podr√≠as limpiar datos espec√≠ficos si es necesario
        }
    },

    /**
     * Manejar errores de autenticaci√≥n
     */
    handleAuthError(error) {
        let message = 'Error de autenticaci√≥n';
        let type = 'error';
        
        switch (error.code) {
            // Errores de popup/Google
            case 'auth/popup-closed-by-user':
                message = 'üö™ Login cancelado por el usuario';
                type = 'warning';
                break;
            case 'auth/popup-blocked':
                message = 'üö´ Popup bloqueado. Por favor, permite popups para este sitio';
                break;
            
            // Errores de email/password
            case 'auth/user-not-found':
                message = 'üë§ Usuario no encontrado. Verifica tu email o reg√≠strate';
                break;
            case 'auth/wrong-password':
                message = 'üîê Contrase√±a incorrecta. ¬øOlvidaste tu contrase√±a?';
                break;
            case 'auth/email-already-in-use':
                message = 'üìß Este email ya est√° registrado. ¬øQuieres iniciar sesi√≥n?';
                break;
            case 'auth/weak-password':
                message = 'üîí Contrase√±a muy d√©bil. Debe tener al menos 6 caracteres';
                break;
            case 'auth/invalid-email':
                message = 'üìß Formato de email inv√°lido. Verifica que sea correcto';
                break;
            case 'auth/user-disabled':
                message = 'üö´ Cuenta deshabilitada. Contacta soporte t√©cnico';
                break;
            case 'auth/invalid-credential':
                message = 'üîë Credenciales inv√°lidas. Verifica tu email y contrase√±a';
                break;
            
            // Errores de red y l√≠mites
            case 'auth/network-request-failed':
                message = 'üåê Error de conexi√≥n. Verifica tu internet e intenta nuevamente';
                break;
            case 'auth/too-many-requests':
                message = '‚è≥ Demasiados intentos fallidos. Espera unos minutos antes de intentar nuevamente';
                break;
            case 'auth/requires-recent-login':
                message = 'üîê Por seguridad, necesitas iniciar sesi√≥n nuevamente para realizar esta acci√≥n';
                break;
            
            // Errores espec√≠ficos de reset de contrase√±a
            case 'auth/user-not-found':
                if (error.message && error.message.includes('reset')) {
                    message = 'üë§ No existe una cuenta con este email. Verifica que sea correcto';
                }
                break;
            
            // Error personalizado de validaci√≥n
            default:
                if (error.message && error.message.includes('email inv√°lido')) {
                    message = 'üìß Formato de email inv√°lido. Debe ser algo como: ejemplo@correo.com';
                } else if (error.message && error.message.includes('contrase√±a')) {
                    message = `üîê ${error.message}`;
                } else if (error.message && error.message.includes('Re-autenticaci√≥n')) {
                    message = `üîê ${error.message}`;
                    type = 'warning';
                } else {
                    message = `‚ùå ${error.message || 'Error de autenticaci√≥n inesperado'}`;
                }
        }
        
        // Mostrar notificaci√≥n mejorada
        this.showNotification(message, type);
        this.state.isLoading = false;
        
        // Log detallado para debugging
        console.error('üî• Auth Error Details:', {
            code: error.code,
            message: error.message,
            displayMessage: message
        });
    },

    /**
     * Emitir eventos personalizados
     */
    emitEvent(eventName, data = null) {
        const event = new CustomEvent(`nebula-auth-${eventName}`, {
            detail: data
        });
        window.dispatchEvent(event);
    },

    /**
     * Mostrar notificaci√≥n
     */
    showNotification(message, type = 'info') {
        if (window.showNotification) {
            window.showNotification(message, type);
        } else if (window.SettingsModule && window.SettingsModule.showNotification) {
            window.SettingsModule.showNotification(message, type);
        } else {
            console.log(`${type.toUpperCase()}: ${message}`);
        }
    },

    /**
     * Obtener informaci√≥n del usuario actual
     */
    getCurrentUser() {
        return this.state.user;
    },

    /**
     * Verificar si el usuario est√° autenticado
     */
    isAuthenticated() {
        return this.state.isAuthenticated;
    },

    /**
     * Verificar si es una sesi√≥n an√≥nima
     */
    isAnonymous() {
        return this.state.isAnonymous;
    },

    /**
     * Obtener estado completo
     */
    getState() {
        return { ...this.state };
    },

    /**
     * üíÄ Eliminar cuenta de usuario completamente
     */
    async deleteUserAccount() {
        try {
            console.log('üö® Iniciando eliminaci√≥n de cuenta...');

            const user = firebase.auth().currentUser;
            if (!user) {
                throw new Error('No hay usuario autenticado para eliminar');
            }

            console.log('üö® Eliminando cuenta del usuario:', user.email);

            // Si el usuario se autentic√≥ con Google, podr√≠a necesitar re-autenticaci√≥n
            // Para este caso, procederemos directamente con la eliminaci√≥n
            
            await user.delete();

            console.log('‚úÖ Cuenta eliminada exitosamente de Firebase');
            
            // Limpiar estado local
            this.state.user = null;
            this.state.isAuthenticated = false;

            // Notificar √©xito
            if (window.showNotification) {
                window.showNotification('Cuenta eliminada exitosamente', 'success');
            }

            // Limpiar cualquier cach√© o datos persistentes
            try {
                await firebase.auth().signOut();
            } catch (signOutError) {
                console.log('‚ÑπÔ∏è Usuario ya desconectado:', signOutError.message);
            }

            return true;

        } catch (error) {
            console.error('‚ùå Error eliminando cuenta:', error);
            
            // Manejar errores espec√≠ficos
            if (error.code === 'auth/requires-recent-login') {
                // El usuario necesita re-autenticarse
                if (window.showNotification) {
                    window.showNotification(
                        'Para eliminar tu cuenta, necesitas iniciar sesi√≥n nuevamente por seguridad. Por favor, cierra sesi√≥n y vuelve a autenticarte.',
                        'warning'
                    );
                }
                
                // Cerrar sesi√≥n para forzar re-autenticaci√≥n
                await this.signOut();
                throw new Error('Re-autenticaci√≥n requerida. Por favor, inicia sesi√≥n nuevamente.');
                
            } else if (error.code === 'auth/network-request-failed') {
                if (window.showNotification) {
                    window.showNotification('Error de conexi√≥n. Verifica tu internet e intenta nuevamente.', 'error');
                }
                throw new Error('Error de conexi√≥n');
                
            } else {
                // Error gen√©rico
                this.handleAuthError(error);
                throw error;
            }
        }
    }
};

// Exportar para uso global
if (typeof window !== 'undefined') {
    window.NebulaAuth = NebulaAuth;
}

// Funci√≥n para inicializar con reintentos
const initializeWithRetry = async (maxRetries = 3) => {
    let retries = 0;
    while (retries < maxRetries) {
        try {
            if (window.firebase && window.NebulaConfig) {
                const success = await NebulaAuth.init();
                if (success) {
                    console.log('üî• Firebase Auth inicializado exitosamente');
                    return;
                }
            }
            throw new Error('Firebase o NebulaConfig no disponible');
        } catch (error) {
            retries++;
            console.warn(`‚ö†Ô∏è Intento ${retries}/${maxRetries} fall√≥:`, error.message);
            
            if (retries < maxRetries) {
                await new Promise(resolve => setTimeout(resolve, 1000 * retries));
            } else {
                console.warn('‚ö†Ô∏è Firebase Auth funcionando en modo fallback');
            }
        }
    }
};

// Auto-inicializar cuando Firebase est√© disponible
if (window.firebase && window.NebulaConfig) {
    initializeWithRetry();
} else {
    // Esperar a que Firebase se cargue
    const checkFirebase = () => {
        if (window.firebase && window.NebulaConfig) {
            initializeWithRetry();
        } else {
            setTimeout(checkFirebase, 500);
        }
    };
    checkFirebase();
}

console.log('üîê NebulaAuth module cargado y listo');
